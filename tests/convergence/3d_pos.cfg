silo_write = T

# The background ion and electron density (1/m3):
background_density =  0.1000E+14

# The number of grid cells per coordinate in a box:
box_size = 8

# Whether cylindrical coordinates are used (only in 2D):
cylindrical = F

# Write binary output files (to resume later):
datfile_write = F

# Allow derefinement if the curvature in phi is smaller than this value:
derefine_cphi =  0.1000+100

# Only derefine if grid spacing if smaller than this value:
derefine_dx =  0.1000E-04

# The length of the domain (m):
domain_len =  0.1250E-01

# The maximum timestep (s):
dt_max =  0.1000E-09

# The minimum timestep (s):
dt_min =  0.1000E-13

# The timestep for writing output (s):
dt_output =  0.2000E-09

# Safety factor for the time step:
dt_safety_factor =  0.9000E+00

# The desired endtime (s) of the simulation:
end_time =  0.600E-08

# The applied electric field (V/m) (vertical):
field_amplitude = -0.1500E+07

# Type of boundary condition to use (homogeneous, ...):
field_bc_type = 'homogeneous'

# Decay time of field (s):
field_decay_time =  0.1798+309

# Potential stays constant up to this radius:
field_dropoff_radius =  0.1000E-02

# Relative width over which the potential drops:
field_dropoff_relwidth =  0.5000E+00

# Linear derivative of field [V/(ms)]:
field_lin_deriv =  0.0000E+00

# Modify electric field after this time (s):
field_mod_t0 =  0.1000+100

# Amplitude of sinusoidal modification (V/m):
field_sin_amplitude =  0.0000E+00

# Frequency of sinusoidal modification (Hz):
field_sin_freq =  0.0000E+00

# Fraction of O2, used for photoionization:
gas_frac_O2 =  0.2000E+00

# The name of the gas mixture used:
gas_name = 'AIR'

# The gas pressure (bar), used for photoionization:
gas_pressure =  0.1000E+01

# The diffusion coefficient for positive ions (m2/s):
ion_diffusion =  0.0000E+00

# The mobility of positive ions (m2/Vs):
ion_mobility =  0.0000E+00

# Limit electron densities to this value (1/m3):
limit_elec_dens =  0.1000+101

[lineout]
    # Use this many points for lineout data:
    npoints = 500

    # Relative position of line maximum coordinate:
    rmax =  0.1000E+01  0.1000E+01 0.1000E+01

    # Relative position of line minimum coordinate:
    rmin =  0.0000E+00  0.0000E+00 0.0000E+00

    # Write output along a line:
    write = F

# The maximum electric field in the fluid model coefficients:
lookup_table_max_electric_fld =  0.3000E+08

# The transport data table size in the fluid model:
lookup_table_size = 1000

# Number of V-cycles to perform per time step:
multigrid_num_vcycles = 2

# Directory where the output should be written:
output_dir = 'output'

# If positive: decay time for source term (s) for time-averaged values:
output_src_decay_time = -0.1000E+01

# Include ionization source term in output:
output_src_term = F

[photoi]
    # Whether photoionization is enabled:
    enabled = F

# Print status every this many seconds:
print_status_sec =  0.6000E+02

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  0.1200E+01

# The refinement buffer width in cells (around flagged cells):
refine_buffer_width = 3

# Refine if the curvature in phi is larger than this value:
refine_cphi =  0.1000+100

# Refine until dx is smaller than this factor times the seed width:
refine_init_fac =  0.1000E+00

# Refine around initial conditions up to this time:
refine_init_time =  0.5000E-08

# The grid spacing will always be smaller than this value:
refine_max_dx =  0.1000E-03

# The grid spacing will always be larger than this value:
refine_min_dx =  0.1000E-06

# The number of steps after which the mesh is updated:
refine_per_steps = 1

# Seed for random numbers. If all zero, generate from clock.:
rng_seed = 8123 91234 12399 293434

# Type of seed: neutral (0), ions (1) or electrons (-1):
seed_charge_type = 1

# Initial density of the seed (1/m3):
seed_density =  0.5000E+19

# Fall-off type for seed (sigmoid, gaussian, smoothstep, step, laser), "default=smoothstep:
seed_falloff = 'gaussian'

# The relative start position of the initial seed:
seed_rel_r0 =  0.5000E+00  0.5000E+00  0.8000E+00

# The relative end position of the initial seed:
seed_rel_r1 =  0.5000E+00  0.5000E+00  0.8000E+00

# Seed width (m):
seed_width =  0.4000E-03

# The name of the simulation:
simulation_name = '3d_pos'

# If true, only include n_e, n_i and |E| in output files:
small_output = F

# Stochastic background density (1/m3):
stochastic_density =  0.0000E+00

# Modify alpha by this factor:
td_alpha_fac =  0.1000E+01

# The name of the eff. ionization coeff.:
td_alpha_name = 'efield[V/m]_vs_alpha[1/m]'

# Modify diffusion by this factor:
td_diffusion_fac =  0.1000E+01

# The name of the diffusion coefficient:
td_diffusion_name = 'efield[V/m]_vs_dif[m2/s]'

# Modify eta by this factor:
td_eta_fac =  0.1000E+01

# The name of the eff. attachment coeff.:
td_eta_name = 'efield[V/m]_vs_eta[1/m]'

# Modify mobility by this factor:
td_mobility_fac =  0.1000E+01

# The name of the mobility coefficient:
td_mobility_name = 'efield[V/m]_vs_mu[m2/Vs]'

# Input file with transport data:
transport_data_file = 'td_analytical_Datton_Hartmann.txt'

